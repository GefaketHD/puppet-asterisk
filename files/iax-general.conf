; Inter-Asterisk eXchange driver definition
;
; This configuration is re-read at reload
; or with the CLI command
; 	reload chan_iax2.so
;
; General settings, like port number to bind to, and
; an option address (the default is to bind to all
; local addresses).
;
[general]
;bindport=4569			; bindport and bindaddr may be specified
;                               ; NOTE: bindport must be specified BEFORE
				; bindaddr or may be specified on a specific
				; bindaddr if followed by colon and port
				;  (e.g. bindaddr=192.168.0.1:4569)
;bindaddr=192.168.0.1		; more than once to bind to multiple
;                               ; addresses, but the first will be the 
;                               ; default
;
; Set iaxcompat to yes if you plan to use layered switches or
; some other scenario which may cause some delay when doing a
; lookup in the dialplan. It incurs a small performance hit to
; enable it. This option causes Asterisk to spawn a separate thread
; when it receives an IAX DPREQ (Dialplan Request) instead of
; blocking while it waits for a response.
;
;iaxcompat=yes
;
; Disable UDP checksums (if nochecksums is set, then no checkums will
; be calculated/checked on systems supporting this feature)
;
;nochecksums=no
;
;
; For increased security against brute force password attacks
; enable "delayreject" which will delay the sending of authentication
; reject for REGREQ or AUTHREP if there is a password.  
;
delayreject=yes
;
; You may specify a global default AMA flag for iaxtel calls.  It must be
; one of 'default', 'omit', 'billing', or 'documentation'.  These flags
; are used in the generation of call detail records.
;
;amaflags=default
;
; ADSI (Analog Display Services Interface) can be enabled if you have
; (or may have) ADSI compatible CPE equipment
;
;adsi=no
;
; Perform an SRV lookup on outbound calls
;
;srvlookup=yes
;
; You may specify a default account for Call Detail Records in addition
; to specifying on a per-user basis
;
;accountcode=lss0101
;
; You may specify a global default language for users. 
; Can be specified also on a per-user basis
; If omitted, will fallback to english
;
;language=en
;
; This option specifies a preference for which music on hold class this channel
; should listen to when put on hold if the music class has not been set on the
; channel with Set(CHANNEL(musicclass)=whatever) in the dialplan, and the peer
; channel putting this one on hold did not suggest a music class.
;
; If this option is set to "passthrough", then the hold message will always be
; passed through as signalling instead of generating hold music locally.
;
; This option may be specified globally, or on a per-user or per-peer basis.
;
;mohinterpret=default
;
; This option specifies which music on hold class to suggest to the peer channel
; when this channel places the peer on hold. It may be specified globally or on
; a per-user or per-peer basis.
;
;mohsuggest=default
;
; Specify bandwidth of low, medium, or high to control which codecs are used
; in general.
;
bandwidth=high
;
; You can also fine tune codecs here using "allow" and "disallow" clauses
; with specific codecs.  Use "all" to represent all formats.
;
;allow=all          ; same as bandwidth=high
;disallow=g723.1        ; Hm...  Proprietary, don't use it...
disallow=lpc10          ; Icky sound quality...  Mr. Roboto.
;allow=gsm          ; Always allow GSM, it's cool :)

; You can adjust several parameters relating to the jitter buffer.
; The jitter buffer's function is to compensate for varying
; network delay.
;
; There are presently two jitterbuffer implementations available for Asterisk
; and chan_iax2; the classic and the new, channel/application independent
; implementation.  These are controlled at compile-time.  The new jitterbuffer
; additionally has support for PLC which greatly improves quality as the
; jitterbuffer adapts size, and in compensating for lost packets.
;
; All the jitter buffer settings except dropcount are in milliseconds.
; The jitter buffer works for INCOMING audio - the outbound audio
; will be dejittered by the jitter buffer at the other end.
;
; jitterbuffer=yes|no: global default as to whether you want
; the jitter buffer at all.
;
; forcejitterbuffer=yes|no: in the ideal world, when we bridge VoIP channels
; we don't want to do jitterbuffering on the switch, since the endpoints
; can each handle this.  However, some endpoints may have poor jitterbuffers 
; themselves, so this option will force * to always jitterbuffer, even in this
; case.
; [This option presently applies only to the new jitterbuffer implementation]
;
; dropcount: the jitter buffer is sized such that no more than "dropcount"
; frames would have been "too late" over the last 2 seconds.
; Set to a small number.  "3" represents 1.5% of frames dropped
; [This option is not applicable to, and ignored by the new jitterbuffer implementation]
;
; maxjitterbuffer: a maximum size for the jitter buffer.
; Setting a reasonable maximum here will prevent the call delay
; from rising to silly values in extreme situations; you'll hear
; SOMETHING, even though it will be jittery.
;
; resyncthreshold: when the jitterbuffer notices a significant change in delay
; that continues over a few frames, it will resync, assuming that the change in
; delay was caused by a timestamping mix-up. The threshold for noticing a
; change in delay is measured as twice the measured jitter plus this resync
; threshold.
; Resyncing can be disabled by setting this parameter to -1.
; [This option presently applies only to the new jitterbuffer implementation]
;
; maxjitterinterps: the maximum number of interpolation frames the jitterbuffer
; should return in a row. Since some clients do not send CNG/DTX frames to
; indicate silence, the jitterbuffer will assume silence has begun after
; returning this many interpolations. This prevents interpolating throughout
; a long silence.
; [This option presently applies only to the new jitterbuffer implementation]
;
; maxexcessbuffer: If conditions improve after a period of high jitter,
; the jitter buffer can end up bigger than necessary.  If it ends up
; more than "maxexcessbuffer" bigger than needed, Asterisk will start
; gradually decreasing the amount of jitter buffering.
; [This option is not applicable to, and ignored by the new jitterbuffer implementation]
;
; minexcessbuffer: Sets a desired mimimum amount of headroom in 
; the jitter buffer.  If Asterisk has less headroom than this, then
; it will start gradually increasing the amount of jitter buffering.
; [This option is not applicable to, and ignored by the new jitterbuffer implementation]
;
; jittershrinkrate: when the jitter buffer is being gradually shrunk 
; (or enlarged), how many millisecs shall we take off per 20ms frame
; received?  Use a small number, or you will be able to hear it
; changing.  An example: if you set this to 2, then the jitter buffer
; size will change by 100 millisecs per second.
; [This option is not applicable to, and ignored by the new jitterbuffer implementation]

jitterbuffer=yes
forcejitterbuffer=yes
maxjitterbuffer=1000
maxjitterinterps=10
resyncthreshold=1000
;jittertargetextra=40
;dropcount=2
;maxexcessbuffer=80
;minexcessbuffer=10
;jittershrinkrate=1

; Minimum and maximum amounts of time that IAX peers can request as
; a registration expiration interval (in seconds).
; minregexpire = 60
; maxregexpire = 60
;
; Enable IAX2 encryption.  The default is no.
;
; encryption = yes
;
; Force encryption insures no connection is established unless both sides support
; encryption.  By turning this option on, encryption is automatically turned on as well.  
;
; forceencryption = yes

; This option defines the maximum payload in bytes an IAX2 trunk can support at a given time.
; The best way to explain this is to provide an example.  If the maximum number of calls
; to be supported is 800, and each call transmits 20ms frames of audio using ulaw
; ((8000hz / 1000ms) * 20ms * 1 byte per sample = 160 bytes per frame), the maximum load
; in bytes is (160 bytes per frame) * (800 calls) = 128000 bytes total. Once this limit is
; reached, calls may be dropped or begin to lose audio.  Depending on the codec in use and
; number of channels to be supported this value may need to be raised, but in most cases the
; default value is large enough.
;
; trunkmaxsize = 128000 ; defaults to 128000 bytes, which supports up to 800 calls of ulaw
;                       ; at 20ms a frame.

; With a large amount of traffic on IAX2 trunks, there is a risk of bad voice quality when
; allowing the Linux system to handle fragmentation of UDP packets. Depending on the size of
; each payload, allowing the O/S to handle fragmentation may not be very efficient. This
; setting sets the maximum transmission unit for IAX2 UDP trunking. The default is 1240 bytes
; which means if a trunk's payload is over 1240 bytes for every 20ms it will be broken into
; multiple 1240 byte messages.  Zero disables this functionality and let's the O/S handle
; fragmentation.
;
; trunkmtu = 1240 ; trunk data will be sent in 1240 byte messages.

; trunkfreq sets how frequently trunk messages are sent in milliseconds. This value is 20ms by
; default, which means the trunk will send all the date queued to it in the past 20ms.  By
; increasing the time between sending trunk messages, the trunk's payload size will increase as
; well.  Note, depending on the size set by trunkmtu, messages may be sent more often than
; specified.  For example if a trunk's message size grows to the trunkmtu size before 20ms is
; reached that message will be sent immediately.
;
; trunkfreq=20     ; How frequently to send trunk msgs (in ms). This is 20ms by default.

; Should we send timestamps for the individual sub-frames within trunk frames?
; There is a small bandwidth use for these (less than 1kbps/call), but they
; ensure that frame timestamps get sent end-to-end properly.  If both ends of
; all your trunks go directly to TDM, _and_ your trunkfreq equals the frame
; length for your codecs, you can probably suppress these.  The receiver must
; also support this feature, although they do not also need to have it enabled.
;
trunktimestamps=yes

; IAX helper threads

; Establishes the number of iax helper threads to handle I/O.
; iaxthreadcount = 10
; Establishes the number of extra dynamic threads that may be spawned to handle I/O
; iaxmaxthreadcount = 100

;
; You can disable authentication debugging to reduce the amount of 
; debugging traffic.
;
;authdebug=no
;
; See qos.tex or Quality of Service section of asterisk.pdf for a description of these parameters.
;tos=ef
;cos=5
;
; If regcontext is specified, Asterisk will dynamically create and destroy
; a NoOp priority 1 extension for a given peer who registers or unregisters
; with us.  The actual extension is the 'regexten' parameter of the registering
; peer or its name if 'regexten' is not provided.  More than one regexten
; may be supplied if they are separated by '&'.  Patterns may be used in
; regexten.
;
;regcontext=iaxregistrations
;
; If we don't get ACK to our NEW within 2000ms, and autokill is set to yes,
; then we cancel the whole thing (that's enough time for one retransmission
; only).  This is used to keep things from stalling for a long time for a host
; that is not available, but would be ill advised for bad connections.  In
; addition to 'yes' or 'no' you can also specify a number of milliseconds.
; See 'qualify' for individual peers to turn on for just a specific peer.
;
autokill=yes

;
; codecpriority controls the codec negotiation of an inbound IAX call.
; This option is inherited to all user entities.  It can also be defined 
; in each user entity separately which will override the setting in general.
;
; The valid values are:
;
; caller   - Consider the callers preferred order ahead of the host's.
; host     - Consider the host's preferred order ahead of the caller's.
; disabled - Disable the consideration of codec preference altogether.
;            (this is the original behaviour before preferences were added)
; reqonly  - Same as disabled, only do not consider capabilities if
;            the requested format is not available the call will only
;            be accepted if the requested format is available.
;
; The default value is 'host'
;
;codecpriority=host
;
; allowfwdownload controls whether this host will serve out firmware to
; IAX clients which request it.  This has only been used for the IAXy,
; and it has been recently proven that this firmware distribution method
; can be used as a source of traffic amplification attacks.  Also, the
; IAXy firmware has not been updated for at least 18 months, so unless
; you are provisioning IAXys in a secure network, we recommend that you
; leave this option to the default, off.
;
;allowfwdownload=yes

;rtcachefriends=yes	; Cache realtime friends by adding them to the internal list
			; just like friends added from the config file only on a
			; as-needed basis? (yes|no)

;rtupdate=yes		; Send registry updates to database using realtime? (yes|no)
			; If set to yes, when a IAX2 peer registers successfully,
			; the ip address, the origination port, the registration period,
			; and the username of the peer will be set to database via realtime.
			; If not present, defaults to 'yes'.

;rtautoclear=yes	; Auto-Expire friends created on the fly on the same schedule
			; as if it had just registered? (yes|no|<seconds>)
			; If set to yes, when the registration expires, the friend will
			; vanish from the configuration until requested again.
			; If set to an integer, friends expire within this number of
			; seconds instead of the registration interval.

;rtignoreregexpire=yes	; When reading a peer from Realtime, if the peer's registration
			; has expired based on its registration interval, used the stored
			; address information regardless. (yes|no)

;parkinglot=edvina		; Default parkinglot for IAX peers and users
				; This can also be configured per device
				; Parkinglots are defined in features.conf

;
; The following two options are used to disable call token validation for the
; purposes of interoperability with IAX2 endpoints that do not yet support it.
;
; Call token validation can be set as optional for a single IP address or IP
; address range by using the 'calltokenoptional' option. 'calltokenoptional' is
; only a global option.  
;
;calltokenoptional=209.16.236.73/255.255.255.0
;
; By setting 'requirecalltoken=no', call token validation becomes optional for
; that peer/user.  By setting 'requirecalltoken=auto', call token validation 
; is optional until a call token supporting peer registers successfully using
; call token validation.  This is used as an indication that from now on, we
; can require it from this peer.  So, requirecalltoken is internally set to yes.
; requirecalltoken may only be used in peer/user/friend definitions,
; not in the global scope.
; By default, 'requirecalltoken=yes'.
;
;requirecalltoken=no
;

;
; These options are used to limit the amount of call numbers allocated to a
; single IP address.  Before changing any of these values, it is highly encouraged
; to read the user guide associated with these options first.  In most cases, the
; default values for these options are sufficient.
;
; The 'maxcallnumbers' option limits the amount of call numbers allowed for each
; individual remote IP address.  Once an IP address reaches it's call number
; limit, no more new connections are allowed until the previous ones close.  This
; option can be used in a peer definition as well, but only takes effect for
; the IP of a dynamic peer after it completes registration.
;
;maxcallnumbers=512
;
; The 'maxcallnumbers_nonvalidated' is used to set the combined number of call
; numbers that can be allocated for connections where call token  validation
; has been disabled.  Unlike the 'maxcallnumbers' option, this limit is not
; separate for each individual IP address.  Any connection resulting in a
; non-call token validated call number being allocated contributes to this
; limit.  For use cases, see the call token user guide.  This option's 
; default value of 8192 should be sufficient in most cases.
;
;maxcallnumbers_nonvalidated=1024
;
; The [callnumberlimits] section allows custom call number limits to be set
; for specific IP addresses and IP address ranges.  These limits take precedence
; over the global 'maxcallnumbers' option, but may still be overridden by a
; peer defined 'maxcallnumbers' entry.  Note that these limits take effect
; for every individual address within the range, not the range as a whole. 
;

#include </etc/asterisk/iax.conf.d/*.conf>
